plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id "dagger.hilt.android.plugin"
    id 'kotlin-parcelize'
    id "de.mannodermaus.android-junit5"
}

android {
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "me.xhsun.gw2leo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner = "me.xhsun.gw2leo.registry.CustomTestRunner"
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jvmArgs '-noverify'
                excludes = ['jdk.internal.*']
            }
        }
        unitTests {
            includeAndroidResources = true
        }
        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
    }

    buildFeatures {
        dataBinding {
            enabled = true
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            debuggable false
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    packagingOptions {
        resources.excludes += "DebugProbesKt.bin"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.activity:activity-ktx:$activityVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Paging
    implementation "androidx.paging:paging-runtime:$pagingVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glidVersion"
    kapt "com.github.bumptech.glide:compiler:$glidVersion"

    // QR Code
    implementation("io.github.g00fy2.quickie:quickie-bundled:$qrScannerVersion")

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-paging:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpInterceptorVersion"

    // Work Manager
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    implementation "androidx.work:work-multiprocess:$workVersion"
    implementation "androidx.hilt:hilt-work:$hiltWorkVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltWorkVersion"

    // Logging
    implementation "com.jakewharton.timber:timber:$loggerVersion"

    // Unit Tests
    testImplementation "androidx.test:core:$androidXTestVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
    testImplementation "io.github.serpro69:kotlin-faker:$fakerVersion"
    testImplementation "io.mockk:mockk:$mockVersion"
    testImplementation "io.mockk:mockk-agent-jvm:$mockVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "androidx.arch.core:core-testing:$archVersion"
    testImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.work:work-testing:$workVersion"


    // Android Test
    androidTestImplementation "androidx.test:core:$androidXTestVersion"
    androidTestImplementation "androidx.test:runner:$androidTestRunnerVerion"
    androidTestImplementation "androidx.test:rules:$androidXTestVersion"

    androidTestImplementation "androidx.test.ext:junit:$junitExtVersion"
    androidTestImplementation "androidx.test.ext:junit-ktx:$junitExtVersion"
    androidTestImplementation "org.assertj:assertj-core:$assertjVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockVersion"
    androidTestImplementation "io.mockk:mockk-agent-jvm:$mockVersion"
    androidTestImplementation "io.github.serpro69:kotlin-faker:$fakerVersion"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
//    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
}

configurations {
    androidTestImplementation {
        exclude group: 'io.mockk', module: 'mockk-agent-jvm'
    }
}

kapt {
    correctErrorTypes = true
}
